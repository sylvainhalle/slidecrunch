#! /usr/bin/php
<?php
/**************************************************************************
    Slide cruncher
    Copyright (C) 2010-2011  Sylvain HallÃ©
    
    Create PDF slideshows and handouts from multiple image files and
    a text description of your presentation.
    
    Author:  Sylvain HallÃ©
    Date:    2011-11-11
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
**************************************************************************/

$usage_string = <<<EOD

Create slideshows from multi-layered PNG files
Usage: slidecrunch [--help] action [inputfile] [options]

Possible values for action:
  slideshow    Produce a full-screen PDF slideshow from input file
  handout      Produce a PDF handout of slides
  subtitles    Produce a subtitle (SRT) file
  avisynth     Produce an AviSynth script
  burst        Burst PDF into multiple images

Global options:
  -o file      Output to file (default: slideshow.xxx, depending on action)
  -v n         Set verbosity level to n (default: 0 = no output)
  --no-clean   Don't remove temporary files at the end
  --clean      Do remove temporary files at the end

Options for handout:
  -i file      PDF source file (default: slideshow.pdf)
  --show-cues  Add a cue symbol in text at each slide change
  --no-compile Don't compile LaTeX source
  -t file      Use file as template
  
Options for avisynth, subtitles and burst:
  --width n    Set image width to n (default: 800)
  --height n   Set image height to n (default: 600)
  --format x   Set image format for slides (default: jpg)
  
Options for avisynth and subtitles:
  --fps n      Set frame rate of output video to n (default: 4)
  --audio file Specify audio input to file (default: slideshow.mp3)

EOD;
/*----------------------*/

// Option defaults {{{
$params = array();
$params["verbosity"] = 1;
$params["no-clean"] = false;
$params["show-cues"] = false;
$params["latex-compile"] = true;
$params["handout-template"] = "handout-template.tex";
$params["inputfile"] = "slideshow.txt";
$params["audiofile"] = "slideshow.mp3";
$params["width"] = 800;
$params["height"] = 600;
$params["prefix"] = "slideshow";
$params["extension"] = "jpg";
$params["cnt-start"] = "0";
$params["cnt-end"] = "9";
$params["fps"] = 4;
$params["words-per-subtitle"] = 16;
$params["words-per-line"] = 8;
// }}}

// Handout templates {{{
/*
  Handout template
  This should be a complete LaTeX file with whatever commands you like.
  Add the string %%SLIDE_CONTENT_HERE at the location in the file where you
  want the handout contents (slides + text, displayed vertically) to be
  inserted.
  Add the strings %%AUTHOR and %%TITLE to add the author and title for
  the document, respectively.
  This slide template inside the document is code that
  will be inserted for each slide to be displayed
  in the handout. Again, you can type whatever you like; insert
  %%FILE_NAME to have the image file to be displayed (i.e. source PDF)
  %%PAGE_NO to have the page number from the PDF for the current slide
  %%SLIDE_TEXT to have the text associated with that slide
*/
$handout_template = <<<'EOD'
%% ----------------------------------------
%% This file is auto-generated by slidecrunch
%% Do not edit!
%% ----------------------------------------
\documentclass[letterpaper]{article}
\usepackage[utf8]{inputenc}
\usepackage{hyperref}
\hypersetup{
  pdfauthor = {%%AUTHOR},
  pdftitle = {%%TITLE},
  pdfcreator = {slidecrunch-1.0}
}
\usepackage{graphicx}
\usepackage[letterpaper]{geometry}
\geometry{top=.75in, bottom=.75in, left=.75in, right=.75in}
\usepackage{array}
\usepackage[x11names]{xcolor}
\usepackage{times}
\setlength\fboxsep{0pt}
\setlength\fboxrule{0.5pt}
\newcommand{\cuemarker}[1]{%
  \textcolor{black}{%
    \ensuremath{\triangleright_{#1}}%
  }%
}
\newcommand{\curmarker}[1]{%
  \textcolor{red}{%
    \ensuremath{\triangleright_{#1}}%
  }%
}
\newcommand{\sepruler}{%
  \vfill
  \noindent{\color{Ivory4}\rule{7in}{0.5pt}}
  \vfill
}

\begin{document}

\noindent
{\Large\textbf{%%TITLE}}\\
\textbf{%%AUTHOR}
\vskip 10pt

%%SLIDE_CONTENT_HERE

%%BEGIN_SLIDE_TEMPLATE
\noindent
\begin{tabular}{p{3in}p{3.8in}}
  \begin{minipage}{3in}
  \fbox{\includegraphics[page=%%PAGE_NO,width=3in]{%%FILE_NAME}}
  \end{minipage}
  &
  \begin{minipage}{3.8in}\setlength{\parindent}{10pt}
    %%SLIDE_TEXT
  \end{minipage}\\
\end{tabular}
\sepruler{}
%%END_SLIDE_TEMPLATE

\end{document}
EOD;

if (file_exists($params["handout-template"]))
{
  $handout_template = file_get_contents($params["handout-template"]);
  spitln("External handout template detected: ".$params["handout-template"]);
}

$slide_template = "";
if (!preg_match("/%%BEGIN_SLIDE_TEMPLATE(.*)%%END_SLIDE_TEMPLATE/ms", $handout_template, $matches))
{
  show_error("Cannot find slide template inside handout template");
  exit(1);
}
assert($matches !== null);
$slide_template = $matches[1];
$handout_template = preg_replace("/%%BEGIN_SLIDE_TEMPLATE.*%%END_SLIDE_TEMPLATE/ms", "", $handout_template);

/*
  Cue template
  This is the LaTeX code that will be inserted if cue markers between
  slides need to be displayed.
*/
$cue_template = <<<'EOD'
\cuemarker{%%PAGE_NO}
EOD;

/*
  Current cue template
  This is the LaTeX code that will be inserted if cue markers between
  slides need to be displayed, for the slide that is being displayed in
  the handout.
*/
$current_cue_template = <<<'EOD'
\curmarker{%%PAGE_NO}
EOD;
// }}}

// Parse command line options {{{
$to_set = "";
if (count($argv) < 2)
{
  show_help();
  exit(1);
}
for ($i = 1, $value = $argv[$i]; $i < count($argv) && $value = $argv[$i]; $i++)
{
  if ($value === "--help" || $value === "-h")
  {
    show_help_long();
    exit(1);
  }
  elseif (!isset($params["action"]))
  {
    $params["action"] = $value;
  }
  elseif ($value === "-o")
  {
    $to_set = "outfile";
  }
  elseif ($value === "-i")
  {
    $to_set = "pdfsource";
  }
  elseif ($value === "--fps")
  {
    $to_set = "fps";
  }
  elseif ($value === "--audio")
  {
    $to_set = "audiofile";
  }
  elseif ($value === "-v")
  {
    $to_set = "verbosity";
  }
  elseif ($value === "--no-clean")
  {
    $params["no-clean"] = true;
  }
  elseif ($value === "--show-cues")
  {
    $params["show-cues"] = true;
  }
  elseif ($value === "--no-compile")
  {
    $params["latex-compile"] = false;
  }
  elseif ($value === "--width")
  {
    $to_set = "width";
  }
  elseif ($value === "--height")
  {
    $to_set = "height";
  }
  elseif ($value === "--format")
  {
    $to_set = "extension";
  }
  elseif ($value === "-t")
  {
    $to_set = "handout-template";
  }
  elseif ($to_set != "")
  {
    $params[$to_set] = $value;
    $to_set = "";
  }
  elseif ($to_set === "")
  {
    $params["inputfile"] = $value;
  }
}
/*if (!isset($params["outfile"]))
{
  show_help("No output file specified.");
  exit(1);
}*/
// }}}

// Class definitions {{{

class Presentation
{
  var $metadata = array();
  var $slides = array();
  var $input_files = array();
  
  public function pdf_metadata()
  {
    $out = "";
    foreach ($this->metadata as $key => $value)
      $out .= "InfoKey: $key\nInfoValue: $value\n";
    $out .= "InfoKey: Creator\nInfoValue: slidecrunch-1.0\n";
    return $out;
  }
  
  public function getMetadata($field)
  {
    return (isset($this->metadata[$field]) ? $this->metadata[$field] : "");
  }
  
}

class Slide
{
  var $text = null;
  var $cue_time = null;
  var $filename = null;
  var $number = 0;
  var $increment = "*";
}
// }}}

// Check presence of input file {{{
assert(isset($params["inputfile"]));
$pres = new Presentation();
if (!file_exists($params["inputfile"]) && $params["action"] !== "burst")
{
  // Input file required for all actions except burst
  show_error("Input file ".$params["inputfile"]." does not exist.");
  exit(1);
}
// }}}

// Read input file {{{
if (file_exists($params["inputfile"]))
{
  spitln("Reading ".$params["inputfile"]);
  $inputfile_contents = explode("\n", file_get_contents($params["inputfile"]));
  $in_metadata = true;
  $current_slide = null;
  $slide_no = 0;
  foreach ($inputfile_contents as $in_line)
  {
    $in_line = trim($in_line);
    // Is it a comment?
    if (starts_with($in_line, "//"))
      continue;
    // Is the line empty (after removing spaces)?
    if (empty($in_line))
    {
      // Are we appending this text to the last seen slide?
      if ($current_slide != null)
      {
        $current_slide->text = ($current_slide->text)."\n\n";
      }
      continue;
    }
    // Is it PDF metadata?
    if ($in_metadata && preg_match("/^(\\w+):\\s*(.*)\$/", $in_line, $matches))
    {
      $pres->metadata[$matches[1]] = $matches[2];
      continue;
    }
    // Is it a slide?
    if (starts_with($in_line, "*") || starts_with($in_line, "<") || starts_with($in_line, ">"))
    {
      $in_metadata = false;
      if ($current_slide != null)
      {
        $pres->slides[] = $current_slide;
      }
      $current_slide = new Slide();
      $current_slide->increment = $in_line[0];
      $current_slide->number = ++$slide_no;
      // Check if slide contains timing info
      $cue_match = "";
      if (preg_match("/^[\\*><]([\\d\\*\\.:]+)\\*|^[\\*><](END\\*[\\d\\.:]+)\\*/s", $in_line, $cuemarks))
      {
        // A timing code is given. Because of our regex above,
        // the timing is placed in position 2 if we are at the end,
        // and in position 1 otherwise
        $cue_match = $cuemarks[0];
        if (strpos($cue_match, "END") !== false)
          $current_slide->increment = "END";
        if (isset($cuemarks[2]))
          list($dummy, $cue_time) = explode("*", $cuemarks[2]);
        else
        {
          // Is there a slide number before the time code?
          if (strpos($cuemarks[1], "*") !== false)
            list($slide_no, $cue_time) = explode("*", $cuemarks[1]);
          else
            $cue_time = $cuemarks[1];
        }
        $current_slide->cue_time = time_to_ms($cue_time);
      }
      $trimmed_text = substr($in_line, strlen($cue_match), strlen($in_line) - strlen($cue_match));
      if (starts_with($trimmed_text, "*") || starts_with($trimmed_text, "<")
        || starts_with($trimmed_text, ">"))
      {
        // Remove extra symbols at beginning of line
        $trimmed_text = substr($trimmed_text, 1, strlen($trimmed_text) - 1);
      }
      $current_slide->text = ($current_slide->text)." ".$trimmed_text;
      continue;
    }
    // Is it a filename?
    if (starts_with($in_line, "|"))
    {
      $pres->input_files[] = trim(substr($in_line, 1, strlen($in_line) - 1));
      continue;
    }
    // Is it the continuation of the text for some slide?
    if ($current_slide != null)
    {
      $current_slide->text = ($current_slide->text)." ".$in_line;
      continue;
    }
  }
  // Done reading file, we add whatever current slide we created
  if ($current_slide !== null)
    $pres->slides[] = $current_slide;
}
// }}}

// Do we produce a slideshow? {{{
if ($params["action"] === "slideshow")
{
  // Assume default value for output file if not specified
  if (!isset($params["outfile"]))
    $params["outfile"] = "slideshow.pdf";
  spitln("Creating slideshow...");
  $pdftk_args = "";
  foreach($pres->input_files as $in_filename)
  {
    $pdf_out = $in_filename;
    $file_ext = pathinfo($in_filename, PATHINFO_EXTENSION);
    if (strtolower($file_ext) === "svg")
    {
      // We crunch SVG files into multi-page PDFs
      spitln("Processing $in_filename with inkscapeslide");
      exec("inkscapeslide $in_filename");
      $pdf_out = str_replace(".svg", ".pdf", $in_filename);
    }
    $pdftk_args .= " ".$pdf_out;
  }
  // Execute pdftk to join all files together
  spitln("Joining files with pdftk...");
  exec("pdftk $pdftk_args cat output .".$params["outfile"]);
  // Set metadata to PDF
  $fh = fopen(".slidecrunch-metadata", "w");
  fputs($fh, $pres->pdf_metadata());
  fclose($fh);
  exec("pdftk .".$params["outfile"]." update_info_utf8 .slidecrunch-metadata output ".$params["outfile"]);
  // Clean-up of temporary files
  if (!$params["no-clean"])
  {
    unlink(".".$params["outfile"]);
    unlink(".slidecrunch-metadata");
  }
  spitln("Slideshow written to ".$params["outfile"]);
  spitln();
  exit(0);
}
// }}}

// Do we produce a handout? {{{
if ($params["action"] === "handout")
{
  // Assume default value for input and output files if not specified
  if (!isset($params["pdfsource"]))
    $params["pdfsource"] = "slideshow.pdf";
  if (!isset($params["outfile"]))
    $params["outfile"] = "handout.pdf";
  $slides_out = "";
  $slide_aggregated_text = "";
  $slide_page_no = 1;
  $previous_symbol = "";
  for ($i = 0, $slide = $pres->slides[$i]; $i < count($pres->slides) && $slide = $pres->slides[$i]; $i++)
  {
    // We set the cue marker symbol inside the loop, since it contains
    // the slide number
    if ($params["show-cues"])
    {
      if ($slide->increment === "*")
        $append_symbol = " CURSYMBOL".($i + 1);
      else
        $append_symbol = " CUESYMBOL".($i + 1);
    }
    else
      $append_symbol = " ";
    if ($slide->increment === "*")
    {
      spit("*", 2);
      if ($previous_symbol === "*" || $previous_symbol === "<")
      {
        $slides_out .= dump_slide_content($slide_aggregated_text, $slide_page_no, $params["pdfsource"]);
        $slide_aggregated_text = $append_symbol.$slide->text;
      }
      else
      {
        $slide_aggregated_text .= $append_symbol.$slide->text;
      }
      $slide_page_no = $i + 1;
      $previous_symbol = "*";
    }
    elseif ($slide->increment === "<")
    {
      spit("<", 2);
      $slide_aggregated_text .= $append_symbol.$slide->text;
      $previous_symbol = "<";
    }
    elseif ($slide->increment === ">")
    {
      spit(">", 2);
      if ($previous_symbol === "*")
      {
        $slides_out .= dump_slide_content($slide_aggregated_text, $slide_page_no, $params["pdfsource"]);
        $slide_aggregated_text = $append_symbol.$slide->text;
      }
      else
      {
        $slide_aggregated_text .= $append_symbol.$slide->text;
      }
      $previous_symbol = ">";
    }
    if ($i == count($pres->slides) - 1)
    {
      // We dump whatever we gathered when at the last slide
      $slides_out .= dump_slide_content($slide_aggregated_text, $slide_page_no, $params["pdfsource"]);
    }
  }
  // Put contents into file
  $out_file = str_replace("%%SLIDE_CONTENT_HERE", $slides_out, $handout_template);
  $cm = str_replace("%%PAGE_NO", "\$1", $cue_template);
  $ccm = str_replace("%%PAGE_NO", "\$1", $current_cue_template);
  $out_file = preg_replace("/CUESYMBOL(\\d*)/m", $cm, $out_file);
  $out_file = preg_replace("/CURSYMBOL(\\d*)/m", $ccm, $out_file);
  $out_file = str_replace("%%AUTHOR", $pres->getMetadata("Author"), $out_file);
  $out_file = str_replace("%%TITLE", $pres->getMetadata("Title"), $out_file);
  // Write content to LaTeX file
  $out_latex_filename = str_replace(".pdf", ".tex", $params["outfile"]);
  $fh = fopen($out_latex_filename, "w");
  fputs($fh, $out_file);
  fclose($fh);
  if ($params["latex-compile"])
  {
    spitln("Compiling handout with LaTeX...");
    exec("pdflatex --interaction batchmode $out_latex_filename", $dummy, $err_code);
    if ($err_code != 0)
    {
      show_error("Error compiling LaTeX handout!");
      exit(1);
    }
    spitln("Handout written to ".$params["outfile"]);
  }
  exit(0);
}
// }}}

// Do we produce subtitles? {{{
if ($params["action"] === "subtitles")
{
  // Assume default value for output file if not specified
  if (!isset($params["outfile"]))
    $params["outfile"] = "slideshow.srt";
  $words_per_subtitle = $params["words-per-subtitle"];
  $words_per_line = $params["words-per-line"];
  $offset_ms = 0;//-time_to_ms("20.44.250") - 31000;
  $offset_sub = 0;//-254;
  $cur_ms = 0 + $offset_ms;
  $subtitle_no = 0 + $offset_sub;
  $out = "";
  foreach ($pres->slides as $slide)
  {
    $new_ms = $slide->cue_time;
    if ($new_ms == 0 + $offset_ms)
    {
      $previous_text = trim($slide->text);
      continue;
    }
    $duration = $new_ms - $cur_ms; 
    // Get the list of words in the text for that slide
    $words = explode(" ", trim($previous_text));
    $num_words = count($words);
    // Compute the number of subtitle cards and duration of each card
    $num_subtitles = ceil($num_words / $words_per_subtitle);
    $ms_per_subtitle = floor($duration / $num_subtitles);
    // Create each subtitle card
    for ($j = 0; $j < $num_subtitles; $j++)
    {
      $word_list = "";
      for ($k = 0; $k < $words_per_subtitle; $k++)
      {
        if (($k % $words_per_line) != 0)
          // Not at start of line, add space
          $word_list .= " ";
        if (isset($words[$j * $words_per_subtitle + $k]))
          $word_list .= $words[$j * $words_per_subtitle + $k];
        // If we allow more than one line, this is where we decide
        // to split it
        if ((($k + 1) % $words_per_line) == 0)
          $word_list .= "\n";
      }
      $word_list = trim($word_list);
      $out_srt = $subtitle_no."\n";
      $out_srt .= ms_to_srt_time($cur_ms + $j * $ms_per_subtitle) . " --> " . ms_to_srt_time($cur_ms + ($j+1) * $ms_per_subtitle)."\n";
      $out_srt .= $word_list."\n\n";
      $out .= $out_srt;
      $subtitle_no++;
      $previous_text = trim($slide->text);
    }
    $cur_ms = $new_ms;
  }
  if (write_to_file($params["outfile"], $out))
  {
    spitln("Subtitles written to ".$params["outfile"]);
    exit(0);
  }
  else
  {
    show_error("Could not write to ".$params["outfile"]);
    exit(1);
  }
}
// }}}

// Do we produce an AviSynth script? {{{
if ($params["action"] === "avisynth")
{
  // Assume default value for output file if not specified
  if (!isset($params["outfile"]))
    $params["outfile"] = "slideshow.avs";
  // Print header
  $out = "";
  $out .= "# --------------------------------------------------\n";
  if (isset($pres->metadata["Title"]))
    $out .= "# Title:  ".$pres->metadata["Title"]."\n";
  if (isset($pres->metadata["Author"]))
    $out .= "# Author: ".$pres->metadata["Author"]."\n";
  $out .= "# Auto-generated file by slidecrunch\n";
  $out .= "# (C) 2010-2011 Sylvain HallÃ©\n";
  $out .= "# --------------------------------------------------\n\n";
  
  // Process cuemarks
  $first = true;
  $current_frame = 0;
  $current_time_ms = 0;
  $file_count = $params["cnt-start"];
  $number_size = strlen($params["cnt-end"]);
  foreach ($pres->slides as $slide)
  {
    // Process time for cuemark
    spit(".", 1);
    $cue_slideno = $slide->number;
    $cue_time_ms = $slide->cue_time;
    $duration_ms = $cue_time_ms - $current_time_ms;
    $frame_duration = floor(ms_to_frame($duration_ms, $params["fps"]));
    $current_frame += $frame_duration;
    // If the user added 0:00.000 in the beginning,
    // we just skip it
    if ($cue_time_ms == 0)
      continue;
    if ($frame_duration < 0)
    {
      // Problem: maybe a typo in the input file
      show_error("Duration between two slides negative between slide $file_count and ".($file_count+1));
      exit(1);
    }
    if ($cue_slideno != "" && $cue_slideno != "END" && round($cue_slideno) != round($file_count + 1))
    {
      // Problem: maybe skipped a number in the slides
      show_error("Slide ".$cue_slideno." does not match with the count for the slides (expected slide ".$file_count.")");
      exit(1);
    }
    if ($first)
    {
      $out .= "video = ";
      $first = false;
    }
    else
    {
      $out .= "video = video + ";
    }
    $formatted_count = sprintf("%0" . $number_size . "d", $file_count);
    // There's a -1, since AviSynth starts at frame 0
    $out .= "ImageSource(\"" . $params["prefix"] . "-" . $formatted_count . "." . $params["extension"] . "\", fps=" . $params["fps"] . ").BicubicResize(" . $params["width"] . "," . $params["height"] . ").Trim(0," . ($frame_duration - 1) . ")\n";
    // Important: we recompute the current position in ms from the actual
    // amount of *frames* we added
    $current_time_ms = $current_frame * (1000 / $params["fps"]);
    //echo $current_time_ms.",".$cue_time_ms."\n";
    $file_count++;
  }
  spit("\n", 1);
  if (!empty($params["audiofile"]))
  {
    $out .= "audio = DirectShowSource(\"" . $params["audiofile"] . "\",video=false,audio=true).EnsureVBRMP3Sync()\n";
    $out .= "clip = AudioDub(video,audio)\n";
    $out .= "Return clip";
  }
  else
  {
    $out .= "Return video";
  }
  $out .= "\n\n# Stats\n";
  $out .= "# Frames: ".$current_frame."\n";
  $out .= "# Total time: ".$current_time_ms."\n";
  if (write_to_file($params["outfile"], $out))
  {
    spitln("Script written to ".$params["outfile"]);
    exit(0);
  }
  else
  {
    show_error("Could not write to ".$params["outfile"]);
    exit(1);
  }
}
// }}}

// Do we burst a PDF into image files? {{{
if ($params["action"] === "burst")
{
  // Assume default value for input file if not specified
  if (!isset($params["pdfsource"]))
    $params["pdfsource"] = "slideshow.pdf";
  spitln("Splitting source file ".$params["pdfsource"]."...");
  $compression = "";
  if ($params["extension"] === "jpg")
    $compression = "-compress JPEG -quality 90";
  if ($params["extension"] === "png")
    $compression = "-compress LZW";
  $verbose = "";
  if ($params["verbosity"] > 1)
    $verbose = "-verbose";
  $caption_string = "";
  if (isset($pres->title))
    $caption_string = $pres->title." (%p/%n)";
  passthru("convert $verbose -caption \"$caption_string\" -comment \"Created with slidecrunch\" -density 150x150 $compression -resize ".$params["width"]."x".$params["height"]." ".$params["pdfsource"]." ".$params["prefix"].".".$params["extension"], $outcode);
  if ($outcode !== 0)
  {
    show_error("Error executing imagemagick");
    exit(1);
  }
  spitln("Done");
  exit(0);
}
// }}}

// Useful functions {{{

function write_to_file($filename, $contents)
{
  $fh = fopen($filename, "w");
  if ($fh)
  {
    fputs($fh, $contents);
    fclose($fh);
    return true;
  }
  return false;
}

function starts_with($s, $begin)
{
  if (strlen($begin) > strlen($s))
    return false;
  return strcmp(substr($s, 0, strlen($begin)), $begin) == 0;
}

function spit($message = "", $verbosity = 0)
{
  global $params;
  if ($params["verbosity"] > $verbosity)
    echo $message;
}

function spitln($message = "", $verbosity = 0)
{
  spit($message."\n", $verbosity);
}

function show_help($message = "Wrong arguments.")
{
  $fh = fopen("php://stderr", "w");
  fputs($fh, "\n$message\nUse slidecrunch --help for usage info\n\n");
  fclose($fh);
}

function show_error($message = "Undefined error (?!?)")
{
  $fh = fopen("php://stderr", "w");
  fputs($fh, "\n$message\n\n");
  fclose($fh);
}

function show_help_long()
{
  global $usage_string;
  $fh = fopen("php://stderr", "w");
  fputs($fh, $usage_string);
  //fputs($fh, "If xclip is installed,\n  ./logs-to-csv directory/ | xclip -selection c\ncopies to the clipboard\n\n");
  fclose($fh);
}

function latex_special_chars($string)
{
    $map = array( 
            "#"=>"\\#",
            "$"=>"\\$",
            "%"=>"\\%",
            "&"=>"\\&",
            "~"=>"\\~{}",
            "_"=>"\\_",
            "^"=>"\\^{}",
            "\\"=>"\\textbackslash",
            "{"=>"\\{",
            "}"=>"\\}",
    );
    return preg_replace( "/([\^\%~\\\\#\$%&_\{\}])/e", "\$map['$1']", $string );
}

/**
 * Converts a time code in mm:ss.xxx into a number of
 * milliseconds
 */
function time_to_ms($t)
{
  preg_match("/(\\d*)[:\\.](\\d*)\\.(\\d*)/", $t, $matches);
  $min = $matches[1];
  $sec = $matches[2];
  $ms = $matches[3];
  $time_ms = $ms + (1000 * ($sec + (60 * $min)));
  return $time_ms;
}


function dump_slide_content($content, $slide_page_no, $filename)
{
  global $slide_template;
  $sl_out = $slide_template;
  $content = trim($content);
  // Add suspension points if text breaks middle-sentence
  $end_dots = "";
  $last_content_char = $content[strlen($content)-1];
  if ($last_content_char !== "." && $last_content_char != "?" && $last_content_char != "!")
    $end_dots = "\dots";
  // Replace meta-markers with their actual contents in the template
  $sl_out = str_replace("%%SLIDE_TEXT", latex_special_chars($content).$end_dots, $sl_out);
  $sl_out = str_replace("%%PAGE_NO", $slide_page_no, $sl_out);
  $sl_out = str_replace("%%FILE_NAME", $filename, $sl_out);
  return $sl_out;
}

/**
 * Rewrites a number of milliseconds into an SRT time code
 */
function ms_to_srt_time($ms)
{
  $t_hr = floor($ms / (60 * 60 * 1000));
  $ms -= $t_hr * (60 * 60 * 1000);
  $t_min = floor($ms / (60 * 1000));
  $ms -= $t_min * (60 * 1000);
  $t_sec = floor($ms / 1000);
  $t_ms = $ms - $t_sec * 1000;
  $out = sprintf("%02d:%02d:%02d,%03d", $t_hr, $t_min, $t_sec, $t_ms);
  return $out;
}

/**
 * Converts a time code in mm:ss.xxx into a number of
 * frames
 */
function time_to_frame($t, $fps)
{
  preg_match("/(\\d*)[:\\.](\\d*)\\.(\\d*)/", $t, $matches);
  $min = $matches[1];
  $sec = $matches[2];
  $ms = $matches[3];
  $time_ms = $ms + (1000 * ($sec + (60 * $min)));
  $frame = $time_ms / (1000 / $fps);
  return $frame;
}

/**
 * Converts a value in millisecondes into a number
 * of frames
 */
function ms_to_frame($t, $fps)
{
  return $t /  (1000 / $fps);
}
// }}}

/* :mode=php:wrap=none:folding=explicit: */
?>

